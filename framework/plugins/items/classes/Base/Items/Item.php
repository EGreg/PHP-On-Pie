<?php

/**
 * Autogenerated base class representing item rows
 * in the items database.
 * 
 * Don't change this file, since it can be overwritten.
 * Instead, change the Items_Item.php file.
 *
 * @package items
 *
 * @property int $publisher_id
 * @property string $name
 * @property string $time_created
 * @property string $time_updated
 * @property string $kind
 * @property string $title
 * @property string $icon
 * @property string $description
 * @property mixed $state
 * @property float $price_credits
 * @property int $share_count
 */
abstract class Base_Items_Item extends Db_Row
{
	function setUp()
	{
		$this->setDb(self::db());
		$this->setTable(self::table());
		$this->setPrimaryKey(
			array (
			  0 => 'publisher_id',
			  1 => 'name',
			)
		);
	}

	static function db()
	{
		return Db::connect('items');
	}

	static function table($with_db_name = true)
	{
		$conn = Db::getConnection('items');
		$prefix = empty($conn['prefix']) ? '' : $conn['prefix'];
		$table_name = $prefix . 'item';
		if (!$with_db_name)
			return $table_name;
		$db = Db::connect('items');
		return $db->dbName().'.'.$table_name;
	}
	
	static function connectionName()
	{
		return 'items';
	}

	/** @return Db_Query_Mysql */
	static function select($fields, $alias = null)
	{
		if (!isset($alias)) $alias = '';
		$q = self::db()->select($fields, self::table().' '.$alias);
		$q->className = 'Items_Item';
		return $q;
	}

	/** @return Db_Query_Mysql */
	static function update($alias = null)
	{
		if (!isset($alias)) $alias = '';
		$q = self::db()->update(self::table().' '.$alias);
		$q->className = 'Items_Item';
		return $q;
	}

	/** @return Db_Query_Mysql */
	static function delete($table_using = null, $alias = null)
	{
		if (!isset($alias)) $alias = '';
		$q = self::db()->delete(self::table().' '.$alias, $table_using);
		$q->className = 'Items_Item';
		return $q;
	}

	/** @return Db_Query_Mysql */
	static function insert($fields = array(), $alias = null)
	{
		if (!isset($alias)) $alias = '';
		$q = self::db()->insert(self::table().' '.$alias, $fields);
		$q->className = 'Items_Item';
		return $q;
	}

	/** @return Db_Query_Mysql */
	static function insertManyAndExecute($records = array(), $chunk_size = 1, $alias = null)
	{
		if (!isset($alias)) $alias = '';
		$q = self::db()->insertManyAndExecute(self::table().' '.$alias, $records, $chunk_size);
		$q->className = 'Items_Item';
		return $q;
	}
	
	function beforeSet_publisher_id($value)
	{
		if ($value instanceof Db_Expression) return array('publisher_id', $value);
		if (!is_numeric($value) or floor($value) != $value)
			throw new Exception('Non-integer value being assigned to items_item.publisher_id');
		if ($value < 0 or $value > 1.844674407371E+19)
			throw new Exception('Out-of-range value being assigned to items_item.publisher_id');
		return array('publisher_id', $value);			
	}

	function beforeSet_name($value)
	{
		if ($value instanceof Db_Expression) return array('name', $value);
		if (!is_string($value))
			throw new Exception('Must pass a string to items_item.name');
		if (strlen($value) > 255)
			throw new Exception('Exceedingly long value being assigned to items_item.name');
		return array('name', $value);			
	}

	function beforeSet_time_updated($value)
	{
       if ($value instanceof Db_Expression) return array('time_updated', $value);
		$date = date_parse($value);
       if (!empty($date['errors']))
           throw new Exception("DateTime $value in incorrect format being assigned to items_item.time_updated");
       foreach (array('year', 'month', 'day', 'hour', 'minute', 'second') as $v)
           $$v = $date[$v];
       $value = sprintf("%04d-%02d-%02d %02d:%02d:%02d", $year, $month, $day, $hour, $minute, $second);
		return array('time_updated', $value);			
	}

	function beforeSet_kind($value)
	{
		if ($value instanceof Db_Expression) return array('kind', $value);
		if (!is_string($value))
			throw new Exception('Must pass a string to items_item.kind');
		if (strlen($value) > 255)
			throw new Exception('Exceedingly long value being assigned to items_item.kind');
		return array('kind', $value);			
	}

	function beforeSet_title($value)
	{
		if ($value instanceof Db_Expression) return array('title', $value);
		if (!is_string($value))
			throw new Exception('Must pass a string to items_item.title');
		if (strlen($value) > 255)
			throw new Exception('Exceedingly long value being assigned to items_item.title');
		return array('title', $value);			
	}

	function beforeSet_icon($value)
	{
		if ($value instanceof Db_Expression) return array('icon', $value);
		if (!is_string($value))
			throw new Exception('Must pass a string to items_item.icon');
		if (strlen($value) > 255)
			throw new Exception('Exceedingly long value being assigned to items_item.icon');
		return array('icon', $value);			
	}

	function beforeSet_description($value)
	{
		if ($value instanceof Db_Expression) return array('description', $value);
		if (!is_string($value))
			throw new Exception('Must pass a string to items_item.description');
		if (strlen($value) > 255)
			throw new Exception('Exceedingly long value being assigned to items_item.description');
		return array('description', $value);			
	}

	function beforeSet_state($value)
	{
		if ($value instanceof Db_Expression) return array('state', $value);
		if (!in_array($value, array('rejected','pending','private','searchable','published')))
			throw new Exception('Out-of-range value being assigned to items_item.state');
		return array('state', $value);			
	}

	function beforeSet_share_count($value)
	{
		if ($value instanceof Db_Expression) return array('share_count', $value);
		if (!is_numeric($value) or floor($value) != $value)
			throw new Exception('Non-integer value being assigned to items_item.share_count');
		if ($value < 0 or $value > 4294967295)
			throw new Exception('Out-of-range value being assigned to items_item.share_count');
		return array('share_count', $value);			
	}

	function afterSet($name, $value)
	{
		if (!in_array($name, $this->fieldNames()))
			$this->notModified($name);
		return $value;			
	}

	function beforeSave($value)
	{
		if (!$this->retrieved) {
			foreach (array('publisher_id','state','share_count') as $name) {
				if (!isset($value[$name]))
					throw new Exception("The field items_item.$name needs a value, because it is NOT NULL, not auto_increment, and lacks a default value.");
			}
		}		//if ($this->retrieved and !isset($value['time_updated']))
		// convention: we'll have time_updated = time_created if just created.
			$value['time_updated'] = new Db_Expression('CURRENT_TIMESTAMP');			
		return $value;			
	}

	function fieldNames($table_alias = null, $field_alias_prefix = null)
	{
		$field_names = array('publisher_id', 'name', 'time_created', 'time_updated', 'kind', 'title', 'icon', 'description', 'state', 'price_credits', 'share_count');
		$result = $field_names;
		if (!empty($table_alias)) {
			$temp = array();
			foreach ($result as $field_name)
				$temp[] = $table_alias . '.' . $field_name;
			$result = $temp;
		} 
		if (!empty($field_alias_prefix)) {
			$temp = array();
			reset($field_names);
			foreach ($result as $field_name) {
				$temp[$field_alias_prefix . current($field_names)] = $field_name;
				next($field_names);
			}
			$result = $temp;
		}
		return $result;			
	}
};